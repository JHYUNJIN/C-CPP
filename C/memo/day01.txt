yoonkwanghee1225@naver.com

#include<stdio.h> --> 전처리 지시문 (c에서 제공하는 헤더파일) 
#include"사용자이름.h--> 사용자가 직접 만든 헤더 파일 , string.h는 사용자 이름으로 사용 불가.

int main(void){ // 표준 코딩 방식
	//statement;(구문)
}

하나의 main() 함수는 필히 가지고 있어야 한다.

변수 --> 데이터를 저장하는 이름 (정수, 실수, 문자), 문자열은(x) --> 배열을 이용하여 문자열을 만들 수 있다.
	변수가 어떤 데이터 타입을 가질것인지 선언해야한다.
	int num; 변수는 오직 하나의 데이터만 가질 수 있다.

funtion() --> 이름(){	}
		함수 선언

믹서기(재료){
	재료를 요리하는 과정
	return a
	}
	
	a=믹서기(사과) 
add(int num1, int num2){
	result = num1 + num2;
	return result;
	}

	re = add(23,4);
		인자,인수
		(실질적인 매개변수)

변수 초기화 하는 방법
1. 선언과 동시에 초기화하는 방법
	int num = 0;
2. 선언한 이후 사용할 때 초기화하는 방법
	num =0;

" " --> 문자열	printf("서식 지정자",변수1,변수2)
' ' --> 문자

서식지정자 : 화면에 출력하고자 하는 형식
	정수 : %d, %i
	실수 : %f, %lf
	문자 : %c

모든 숫자 및 문자를 입력하기 위해서는 scanf() 함수를 이용하여야 한다.

return 0;
1. 함수의 정상적인 종료를 의미한다.
2. 결과 값을 함수에게 반환

1. +-*/(나누기) %(나머지) //(몫)

대입 연산자
+=, -=, *=, /=, %=

증감(증가,감소) 연산자
1씩 증가 i++ --> i+=1 --> i = i+1
1씩 감소 i--

선연산 후 증가
선증가 후 연산

관계 연산자
== 두 값이 동일하면 참
!= 두 값이 서로 다르면 참

논리 연산자
&& --> 둘 다 참일 때 참
|| --> 둘 중 하나라도 참이면 참
! --> 참이면 거짓 , 거짓이면 참

조건문 / 반복문 / 배열 (문자열) / 메모리 / 포인터

조건문 if 구문, switch~case 구문
참 혹은 거짓 일 때
각각 다른 일을 수행

반복문 for 구문, while 구문
	여러 번 수행해야 할 작업을 한번에 해결하는 명령어

1 2 4 3 2 4 

1. 조건문 if , switch~ case 구문

2. for 구문
	for(초기값;조건문;증가값){
		statement;
	}

	for(int i=0; i<10; i++)
	int i;
	for(i=0;i<10;i++) // ansi-c코딩

	for( ; ; ) 무한 루프 // 파일입출력 할 때 사용함

3. 변수
	- 지역변수 {  }, 초기화
	- 전역변수 --> 자동 초기화

4. 다중 for문
	for() {
		for() {
		}
	}

5. while 구문
	초기값;
	while(조건문){

	증가값;
	}


6. 배열
* 배열은 우선적으로 배열의 크기를 선언해줘야한다. --> 메모리 확보를 위해서.

배열의 초기화
1.	int num[4]={10,20,30,40};
	int num[0]=10;
	int num[1]=20;
	int num[2]=30;
	int num[3]=40;

2.	int num[] = {10,20,30,40};

3.	int num[4]={10,20};

4.	int num[10000] = {0};

5.	int num[3] = {10,20,30,40,50};  <-- overflow error

배열의 크기(개수)를 알아내는 함수 --> sizeof() 

배열의 크기(개수) = sizeof(전체 배열의 이름) / sizeof(배열의 데이터 형식);  
	count   =  sizeof(num)		/	sizeof(int);


배열 --> 메모리 --> 포인터 --> 문자열

int a = 100;
int b = 200; 

배열의 이름은 그 자체가 주소를 나타낸다.
&num[0]
&num[1]
&num[2]

& --> 주소연산자
* --> 포인터 변수를 선언하는 연산자. int * p변수명; ex) int * pNum

pointer --> 주소값을 저장하는 변수('*')
	1. & : 주소를 찾아주는 기호
	2. * : 주소를 저장할 수 있게 선언하는 기호

	int --> 4byte
	char --> 1byte

	char ch;
	
	char* p;
	p=&ch;  --> 포인터p가 변수 ch를 가리키고 있다.

	char ch ='B';
	int* p;
	p=&ch;

	char ch='B';
	int* p = &ch;

	null은 표준 C 라이브러리에 0으로 정의된 매크로 상수이다.
	int* p = NULL;
	int* p - 0;

const 포인터
	int	*	p;
        const  const   const
 
const int * p; //읽기 전용 포인터 읽기 전용이기에 수정이 되지않는다.
int * const p; // 특정 변수 전용 포인터
const int* const p; //

배열과 문자열 --> 문자열을 처리하는 명령어가 존재하지 않는다.

int num[3]
char ch[3] = {'A','B','C'};
char ch[3]="ABC";

문자열 함수
#include<string.h>
1. 문자열의 길이 --> strlen();
2. 문자열 복사 --> strcpy();
3. 문자열 이어주는 함수 --> strcat();
4. 두 문자열 비교하는 함수 --> strcmp();
	두 문자열이 동일하면 strcmp함수는 0, 앞에 문자열이 크면 1, 뒤에 문자열이 크면 -1 값을 반환한다.

이차원배열 만드는 법
int num[행][열]
int num[3][2] --> 3행 2열의 이차원배열이 만들어진다.

2차원 배열 --> 1차원 배열을 여러 개 모아놓은 것


      행 열
int num[][];
       첨자

2차원 배열의 초기화
	int num[3][4]={
		{1,2,3,4},
		{5,6,7,8},
		{9,10,11,12}
	}

메모리, 배열(1,2차원),포인터
	배열을 제일 먼저 선언하는 이유 --> 메모리 확보 --> 정적 --> 메모리의 효율을 높이기 위해
	--> 사용자가 필요 할 때  메모리를 직접 할당하는 명령어 --> malloc(), calloc(), realloc()

동적 메모리 확보 --> malloc()
	: 메모리를 미리 잡아두지 않고 필요할 때마다 메모리를 확보하는 방법

포인터 변수 = (포인터변수 데이터형*)malloc(포인터 변수데이터형 크기*필요한 배열의 크기);
    p        = (int*)malloc(4*5);  ==  p=(int*)malloc(sizeof(int)*5);

malloc():동적 메모리 할당(메모리가 할당 되고나서 초기화를 하지 않기때문에 사용자가 직접 초기화를 해줘야한다.) --> 사용자가 직접 memset()을 사용하여 초기화 한다.
calloc():동적 메모리 할당(선언과 동시에 자동 초기화된다.)

구조체 --> 배열과 비슷한 성격을 가지고 있다.
구조체란 사용자가 새로운 데이터 타입의 크기를 설정하는 것을 의미한다.
다양한 데이터의 형의 변수를 하나의 변수로 묶어서 사용하는 것을 의미한다.
	struct 구조체이름{
		각종 구조체 변수 선언;
		각종 구조체 변수 선언;
		각종 구조체 변수 선언;
	};
	
	struct test{   // 구조체 이름만 선언하면 메모리에 할당 받지 않은 상태이기 때문에 사용할 수 없다. 구조체 변수 명을 선언해야 함
		int a;
		char c;
	};
	
	struct test t; // 변수t라는 이름의 test구조체 변수가 선언된 것을 의미

struct(구조체) --> 다양한 데이터 형의 변수를 하나의 변수(이름)로 묶어 준다.
구조체를 사용하기 위해서는 반드시 구조체 변수를 선언해야한다.

struct(구조체선언 키워드) test(구조체이름){
	int a;
	char b;
	char c[5];
	float d;
	};
* 문자형 배열
	#include<string.h>

Dot(.) --> 접근 연산자

구조체 --> 자기 참조 구조체
	  외부 참조 구조체
구조체는 포인터를 사용하지 않으면 의미가 없다. 
*p=&test;
p->a;
p->b; // ->화살표 기호로 구조체 안의 변수에 접근 가능하다

자기참조 구조체 struct student* link; // 자기 참조 구조체 포인터 변수 선언

함수 + struct --> c++
배열의 단점 : 배열의 크기가 존재해야한다는 것 , 같은 타입의 데이터만 가질 수 있다.


#include, #define, #ifdef, #undef ...

#define : 복잡한 문자열 혹은 함수 혹은 긴 이름을 가진 것들을 쉬운 기호로 표현하는 방법 
#define[기호][숫자,문자열,함수]

C언어 --> 함수의 집합
	int 함수_이름(매개변수){
	
	}

함수의 유형
1. 전달인자 (O), 반환 값 (O) --> int a(){return a;}
1. 전달인자 (O), 반환 값 (X)
1. 전달인자 (X), 반환 값 (O)
1. 전달인자 (X), 반환 값 (X)

3 개의 정수를 인자로 전달 받아서 그 중 가장 큰 수를 반환하는 함수를 작성하시오.(가장 작은 수도 같이 반환)


int maxNum(){
}

int minNum(){
}
int main(void){

return 0 ;
}









static 예약어




<친구 목록>
1. 친구 연락처 보기
2. 친구 전화번호 입력
3. 친구 삭제하기
4. 종료

--> 
1.
1: 홍길동	30	010-1234-5678
2: 이순신	40	010-5433-6453
...

2.
이름을 입력:
나이 입력:
전화번호 입력:

이름 char name[15];
나이 int or char[3];
전화번호 char phoneNumber[17];

struct member{
	char name[15];
	char age[3];
	char phone[17];
};

3.
삭제할 행 번호를 입력해주세요.

getche(); 보여준다
getch; 보여주지 않는다. 


--------------------------------------------------------------------

헤더 파일 : 함수의 속성이 선언되어 있거나, 구조체 등의 데이터 구조가 정의 되었 있는 파일을 의미한다.
1. stdio.h --> 표준 입출력 관련파일 printf(), scanf(), puts(), gets(), fopen()등을 포함하고 있다.
2. string.h --> 문자열 관련 strcpy(), strcmp(문자열 비교), strlen(), strcat(문자열 합치기)
3. malloc.h --> 메모리 관련 malloc(), calloc(), free()
4. stdlib.h --> C의 표준 라이브러리 exit(), rand(), system()등을 포함하고 있다.



C 자료(data) 구조 --> 데이터를 빠르게 검색, 데이터를 알기 쉽게 나열

	구조체, 동적 메모리 할당, 포인터
	1. 자기 참조 구조체
	2. 외부 참조 구조체

			단순 구조 --> 정수, 실수, 문자, 문자열

			선형 구조 --> 순차 리스트, 연결 리스트, 스택, 큐, 데크
	자료구조		( 1: 1 )       (배열)         (포인터)
			비선형 구조 --> 트리 , 그래프
			(1:n, n:m)   (1:n)  (n:m)	
			파일 구조 --> 순차 파일, 색인 파일, 직접 파일

		
		스택 --> 순차 스택, 연결 스택

구조체란 여러가지 타입의 데이터를 저장하기 위한 것이다.
구조체 이름만으로는 사용할 수 없다. 메모리 할당을 받지 않았기 때문에(주소가 없다는 말임)
struct student std1{ }; 선언해야 주소가 할당되어 사용할 수 있다.
struct student { }; 선언만 한것이고 주소가 할당되지 않음

데이터의 종류를 선언

노드의 구조
	struct Node{ 
		int data;
	};

	struct Node{
		int data;
		struct Node* p;
	};

	둘 다 똑같다. 데이터는 1개 포인터변수는 연결을 위한 변수이다.

struct test{};
struct test t1;

typedef struct test{}test;
test t2;


배열 리스트의 가장 큰 장점은 빨리 찾을 수 있다.
근데 수정이 안된다 배열의 크기를 만들어 놓고 선언하기 때문에

배열의 구조
1. 배열의 길이(maxLength)
2. 현재 자료의 개수 (currentPoint)
typedef struct ArrayListNode{
	int maxLength;
	int currentPoint;
}ArrayList;


동적배열의 선언
1. 배열의 길이  --  maxLength
2. 현재 배열에 있는 데이터의 개수(리스트에 데이터를 추가 할 수 있는지 없는지를 확인)  --  currentData
3. 포인터 변수 선언  --  pData

데이터
1. 단순 데이터(변수)
2. 복수 데이터(배열) --> 같은 타입만 저장할 수 있다.

1.Node --> 자료를 저장하는 단위
구조체로 선언 --> 노드에 한 개의 데이터를 저장 할 수 있지만, 동시에 여러개의 자료를 저장하고 싶다면 struct 구조체를 선언해야 한다. ex) struct ArrayListNodeType{ int num; char name[15]; };

구조체의 변수를 선언 struct 구조체_이름 구조체_변수 --> 메모리 할당
	struct 구조체_이름 : 사용자가 정의하는 새로운 데이터 타입


typedef struct ArrayListType{
	int maxLength;
	int currentData;
	int * pData;
}ArrayList;

ArrayList * createList(int count){
	ArrayList* pNum = (ArrayList*)malloc(sizeof(ArrayList)); -- 배열의 사이즈선언에 의해 배열 생성
		pNum->maxLength=count;
		pNum->currentData=0;
		pNum->(ArrayListNode*)malloc(sizeof(ArrayListNode)*count);
		memset(pNum->pdata,0,sizeof(ArrayListNode)*count);
				0으로 초기화, 배열의 길이
		memset은 malloc()함수로 선언된 동적메모리를 초기화하는 함수

		return pNum;
	}

동적메모리할당의 단점은 자동초기화를 못해준다는 것이다.

*calloc() --> 자동 초기화 됨
 malloc() --> 자동 초기화가 안되기 때문에 사용자가 직접 초기화 해주어야 한다. --> memset()

배열리스트의 단점 

int addListData(ArrayList* pList,int position, int data){
	int i-0;
	for(i=pList->currentData-1; i>=position; i--){
		pList->pData[position].data=data;
		pList->currentCount++;
		return 0;
	}

자료구조  --> 1. 데이터를 삭제
	    2. 메모리를 삭제

	배열 리스트는 빈 공간을 허용핮 않는다. 특정 위치의 데이터를 삭제한다면 다음 위치의 데이터를 당겨 빈 공간을 채워넣어야한다.
	position <-- 자료를 삭제하려는 위치 값
	i <-- position
	
	i가 배열의 마지막 위치 값 보다 작은지 확인

	위치 i+1에 있는 자료를 i로 이동

	i <-- i+1

연결 리스트 (스택, 큐, 트리, 힙)
포인터로 연결시킬것이다.

데이터가 없는 노드 = 더미노드 or 헤더 노드

요일 = {월,화,수,목,금,토}
data p
월 
struct week{
	char day;
	struct week* p;
};

연결리스트를 만들때는 기준을 잡아줘야한다.
ex) 요일 --> 월 --> 화 --> 수 --> ..

연결리스트 --> 단순 연결리스트, 선형 연결리스트, 단순 선형 연결리스트

단순 연결리스트에서 데이터를 삽입하려고 할 때의 방법은 총 3가지 방법이 존재한다.
1. 맨 앞에 삽입	(firstInsert)
2. 마지막에 삽입	(lastInsert)
3. 중간에 삽입	(middleInsert) 3가지 메소드를 만들어줘야한다.
	
노드는 데이터를 저장하는 장소인데.
헤더 노드에는 데이터를 저장하는 장소가 없고, 주소만 저장 가능하다.
(헤더 노드는 노드에 포함을 하지 않는다.)

동적메모리를 할당하면 초기화가 안된다.

배열을 선언하게 되면 크기만큼 초기화를 해줘야하는데 연결리스트는 선언하면서 NULL로 초기화해줘야한다.
왜냐하면 배열은 선언시 크기와 길이 타입을 정의해줘야하는데 연결리스트는 그럴 필요가 없기 때문이다.
연결리스트는 길이의 제한이 없다. 배열은 초기화해준 그 길이만큼 제한이 되어있다.

1. 연결리스트(주소) --> 포인터를 이용하여 한 줄로 데이터를 저장한다.
	선형 리스트(1:1)


1. 스택
LIFO (Last In Front Out)
삽입(push)
삭제(pop)
top

1. 공백 스택 생성 
	createStack(stack,5)
	top = -1

2. 원소 A 삽입
	++top
	push(stack,A);
	

3. 원소 B 삽입
	++top
	push(stack,B);
 	

4. 원소 삭제
	pop(stack)
	top--


연결 자료구조(stack)
*top->NULL
1. 공백스택 생성
	createStack(stack);
2. 원소 A삽입
	push(stack,A);
	*top->*A
	link->null
3.원소 B 삽입
	push(stack,B);
	*top->*B
	link->
4.원소 C삽입
	push(stack,C);
	*top->*C

*stackNode* top;

typedef int element;
typedef struct stackNode{
	element data;
	struct stackNode* link;
}stackNode;

stackNode* top; // (스택의 top노드를 지정하기 위해 포인터 top변수를 선언한 것이다.)

int isStackEmpty(void);
void push(element item);
element pop(void);
void printStack(void);

stack
	마지막으로 삽입된 데이터를 가리키는 것은 top
push 데이터 집어 넣을때
pop 데이터 뺼때 LIFO
top


Queue(FIFO)
enqueue
dequeue
머리부분 front
꼬리부분 rear 

스택 / 큐 의 삽입 삭제 연산 비교
			삽입연산				삭제 연산
		연산자		삽입위치		연산자		위치

스택		push		top		pop		top

큐		enqueue		rear		dequeue		front

1. 큐 생성
createQue;
front = -1
rear = -1

2. 원소 A삽입
enqueue(Q,A);	front=0,rear=0

3. 원소 B삽입
enqueue(Q,B);	front=0,rear=1

4. 원소 C사입
enqueue(Q,C);	front=0,rear=2

5. 원소 삭제
dequeue(Q);	front=1,rear=2
// 큐는 삭제한 공간을 다시 사용할 수 없다. 0번쨰 인덱스 사용불가.

큐는 데이터타입이 2개 이상 들어가야하기 때문에 구조체로 만들어줘야한다.


연결 큐가 공백 상태인 경우 삽입하는 newNode가 첫번째 노드이자 마지막 노드가 되어야 하므로
포인터 front, rear 모두 newNode를 가리키게 해야한다.

연결큐가 공백이 아닌 경우, 삽입하는 newNode를 현재 마지막 노드를 가리키는 
rear노드의 뒤(LQ->rear->link)에 연결한다. 마지막 노드가 변경되었으므로 rear의 위치를 조정한다.


Queue / 연결 Queue / Deque(데크)

데크일때 삽입 명령어 --> insertFront();, insertRear();
	삭제 명령어 --> deleteFront();, deleteRear();

1. 데크 생성
createDeque();

2. 원소 A 삽입
insertFront(DQ,'A'); --> A

3. 원소 B 삽입
insertFront(DQ,'B'); --> B A

4. 원소 C 삽입
insertRear(DQ,'C'); --> B A C

데크의 이중 연결 리스트
NULL=llink data rlink	---	llink data rlink	  ---	llink data rlink=NULL



트리
1:n의 비선형 자료구조

최상단 부모노드 = root
부모노드
자식노드
자식노드를 더 이상 가지고 있지 않는 노드 = 단말노드
같은 부모에게서 나누어진 자식 노드 = 형제 노드
부모에게서 나뉜 자식노드 그 자식노드가 자식노드를 가지고 있다면 자신의 자식노드의 부모노드가 되는데
그것을 서브트리라 부른다.
부모노드가 가지고 있는 자식의 개수에 따라 n차수 라고 부른다. 만약 자식노드가 셋이라면 삼차수라고부른다.
A	B	E
		F

	C	G

	D	F
		I
		J


트리의 구조를 일정하게 제한하여서 트리의 연산이 단순하고 명확하게 만들어주는 방법이 있다.
그 방법으로는 전체 트리의 차수를 2이하로 제한하는 것이다. --> 이진 트리


A	B	D	H
			I

		E	J
			K

	C	F	L
			M

		G	N


이진트리		완전이진트리	포화이진트리

		편향이진트리	왼쪽표향이진트리

				left data right
	
	left data right					left data right

이진트리 순회
	1.전위 순회 : D -> L -> R (왼쪽 다 돌고 오른쪽 처리)
		A->B->D->H->E->I->J->C->F->G->K
	2.중위 순회 : L -> D -> R
		H->D->B->I->E->J->A->F->C->G->K
	3.후위 순회 : L -> R -> D
		H->D->I->J->E->B->F->K->G->C->A

typedef char element;
typedef struct treeNode{
	element data;
	struct treeNode*left; // 왼쪽 서브트리에 대한 링크
	struct treeNode*right; // 오른쪽 서브트리에 대한 링크
}treeNode;

treeNode* makeRootNode(element data, treeNode*left, treeNode*right);

전위순회(treeNode* root);
중위순회(treeNode* root);
후위순회(treeNode* root);

A*B-C/D

이진트리 탐색 => 탐색용 자료구조로 사용하기 위해서 원소 크기에 따라 노드를 정한다.
1. 모든 원소(데이터)는 서로 다른 값이어야한다.(중복 불가)
2. 왼쪽 서브 트리에 있는 원소(데이터)들의 값은 루트의 데이터 값보다 작다.
3. 오른쪽 서브 트리에 있는 원소(데이터)들의 값은 루트의 데이터 값보다 크다.
4. 왼쪽 서브 트리, 오른쪽 서브 트리도 이진 탐색 트리이다.


heap => 이진 트리에서 최대 값, 최소 값을 찾기 위한 자료구조
	완전이진트리여야 한다.
	최대 히프 ( 최대 값)
	최소 히프 (최소 값) 을 의미한다.

1) 최소 히프
	부모 노드의 원소 값 <= 자식 노드의 원소 값

2) 최대 히프
	부모 노드의 원소 값 >= 자식 노드 원소 값

=====================================================================

그래프 : 정점과 정점을 간선으로 연결된
	다(n):다(m) 관계를 가지고 있는 비 선형 구조
정점(Vertex)
간선(Edge)
G = (V,E)


무방향 그래프 나타내는 방법
V(G) = {A,B,C,D};
E(G) = {(A,B),(A,D),(B,C),(B,D),(C,D)}

V(G1) = {A,B,C,D}
E(G1) = {<A,B>,<A,D>,<B,C>,<B,D>,<C,D>}

가중치란 정점을 연결하는 간선에 가중치를 할당한 그래프를 가중치 그래프라고 한다.

(1) 순차 자료구조를 이용한 그래프 구현 -> 인접 행렬(배열)
(2) 연결 자료구조를 이용한 그래프 구현 -> 인접 리스트(연결)

그래프에서 인접되어 있으면 1
	인접되어 있지 않으면 0
	자기자신은 0 으로 표현
인접이란 간선으로 연결되어있있다는것을 의미한다.

가중치란 정점을 연결하는 간선에 가중치를 할당한 그래프를 가중치 그래프라고 한다.



1. 인접 행렬(배열)
(1) 무방향 그래프
	A	B	C	D

A	0	1	0	1
	
B	1	0	1	1	--> 정점 B의 차수 3
	
C	0	1	0	1

D	1	1	1	0


(2) 방향 그래프

	A	B	C	D

A	0	1	0	1
	
B	0	0	1	1	--> 정점 B의 진출 차수 2
	
C	0	0	0	1

D	0	0	0	0

		↓
		정점 B의 진입 차수 1

2. 연결 자료구조를 이용한 그래프 구현 -> 인접 리스트(연결)
	정점(Vertex)과 정점을 단순 연결 리스트로 만드는 것

	정점A(data,link)->정점B(data,link)->정점D(data,link=NULL)


















