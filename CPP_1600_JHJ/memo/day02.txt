new
	포인터 = new 타입[(초기값)];
	
	new 다음에 타입을 적으면 sizeof(타입) 만큼의 메모리가 할당되고 할당된 포인터가 리턴된다.
	new가 리턴하는 번지는 같은 타입의 포인터 변수로 대입 받는다.
	할당과 동시에 초기화하고 싶으면 타입 다음 초기값을 적되 초기화를 할 필요가 없으면 생략할 수 있다.

delete
	delete 포인터;

	new 연산자를 통해 할당된 메모리를 해제할 때는 delete 연산자를 사용한다.
	만약 할당만 하고 해제를 하지 않으면 메모리 일부를 사용할 수 없게 되는 Memory Leak 이 발생하므로
	동적 할당한 메모리는 반드시 delete 해야한다.

malloc, free 와 대비되는 장점
	1. malloc, free 는 라이브러리가 제공하는 함수이지만 new, delete는 연산자이다.
	2. malloc 함수는 void* 를 리턴하므로 형변환이 강제되었다. 하지만 new는 해당 타입의 포인터를 리턴한다.
	3. new 연산자로 객체를 할당할 때 생성자가 자동으로 호출된다. delete로 객체를 삭제할 때 소멸자(파괴자)가 자동 호출된다.

string
	문자열을 다루는 클래스이다.
	C에서는 char* 또는 char[] 의 형태로 문자열을 다뤘다면, C++에서는 문자열을 하나의 변수 type처럼 사용하며,
	문자열을 훨씬 다양하고 쉽게 다룰 수 있게 해준다.

bool
	참과 거짓, 1과 0의 값만 가지고 있는 자료형이다.
	예약어 true와 false를 가지고 있으며, true는 1, false는 0이라는 상수값을 가진다.
	정수와 다른 점은 둘 다 1byte 라는 것이다.

객체 지향 프로그래밍
	모든 데이터를 객체로 취급하며 이 객체들을 조립하여 프로그램을 만드는 방법

class
	객체 지향 프로그래밍에서 객체를 생성하기 위해 변수, 함수를 정의하는 틀
	C++ 에서 클래스는 구조체의 상위 호환이라고 생각할 수 있다.
	멤버 변수를 가진다에서 구조체의 성격을 그대로 가지고 왔으며 . 연산자, -> 연산자 등
	문법은 서로가 동일하다.






















